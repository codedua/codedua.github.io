<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>codedua</title>
    <link>https://codedua.github.io/</link>
    <description>Recent content on codedua</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 26 Jul 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://codedua.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Building SOME/IP application using CommonAPI C&#43;&#43; SOME/IP</title>
      <link>https://codedua.github.io/posts/commonapi-cpp-someip/</link>
      <pubDate>Wed, 26 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://codedua.github.io/posts/commonapi-cpp-someip/</guid>
      <description>CommonAPI C++ SOMEIP is a suite of toolchain and library that provides convenient way to perform SOME-IP using vsomeip.&#xA;In other words, CommonAPI wraps vsomeip.&#xA;Overall CommonAPI C++ is a C++ framework for inter-process and network communication. It defines a high-level C++ API, which can be used for different IPC mechanisms. CommonAPI C++ SOMEIP, as the name implies, has 2 part:&#xA;CommonAPI C++ SOMEIP IPC stack (the implementation of the basic communication and the service discovery by vsomeip) Client and Server communicate via the Interface that the Server provides and the Client requires.</description>
    </item>
    <item>
      <title>SOMEIP packet dissection</title>
      <link>https://codedua.github.io/posts/someip-packet-dissection/</link>
      <pubDate>Wed, 26 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://codedua.github.io/posts/someip-packet-dissection/</guid>
      <description>Background Before consumer sending the first SOMEIP message to call provider’s method, consumer and provider must “handshake” to detect each other.&#xA;Handshake is steps conducted by SOMEIP Service Discovery sending broadcast message to find out existence services over the network.&#xA;That broadcast message is called SOMEIP SD message.&#xA;Both SOMEIP and SOMEIP SD packet are encapsulated as TCP/UDP payload.&#xA;SOMEIP Message SOME/IP messages shall be sent over UDP or TCP.</description>
    </item>
    <item>
      <title>SOME/IP Introduction</title>
      <link>https://codedua.github.io/posts/someip-introduction/</link>
      <pubDate>Mon, 24 Jul 2023 20:59:44 +0700</pubDate>
      <guid>https://codedua.github.io/posts/someip-introduction/</guid>
      <description>SOME-IP by itself is not a library, and have no source code. It is merely a specification, developed and maintained by AUTOSAR. while its implementation is called vsomeip and released by COVESA.&#xA;CommonAPI C++ SOMEIP is a suite of toolchain and library that provides convenient way to perform SOME-IP using vsomeip. In other words, CommonAPI wraps vsomeip.&#xA;Overall Architecture of SOME/IP Routing manager:&#xA;Routing manager is the central component that processes all the SOME/IP messages received.</description>
    </item>
    <item>
      <title>vsomeip configuration file - vsomeip.json</title>
      <link>https://codedua.github.io/posts/vsomeip-configuration-file/</link>
      <pubDate>Mon, 01 May 2023 00:00:00 +0000</pubDate>
      <guid>https://codedua.github.io/posts/vsomeip-configuration-file/</guid>
      <description>The vsomeip configuration file is in JSON format, typically named vsomeip.json, although you can name it anything with a .json extension. Each ECU with an app running SOMEIP requires at least one configuration file. Without configuration file, the SOMEIP apps on that ECU can only communicate others within ECU, not communicate other ECUs&#xA;vsomeip.json there are main keys/tags in configuration file&#xA;unicast: host&amp;rsquo;s IP address&#xA;application: list of applications should be load this configuration file.</description>
    </item>
    <item>
      <title>Static Library and Shared Library</title>
      <link>https://codedua.github.io/posts/static-library-shared-library/</link>
      <pubDate>Tue, 28 Mar 2023 14:34:34 +0700</pubDate>
      <guid>https://codedua.github.io/posts/static-library-shared-library/</guid>
      <description>Static library Static library còn được gọi là archive /ˈɑːrkaɪv/ vì thực tế nó là một file chứa một hoặc nhiều object files.&#xA;Cũng vì thế mà static library có quy tắc đặt tên là lib*.a (a đại diện cho archive), ví dụ: libgnss.a libtime.a&#xA;Công cụ để tạo ra static library gọi là archiver, sử dụng thông qua command ar&#xA;Ví dụ ta có source code math_operations.cpp chứa các function tính toán cộng, trừ, nhân, chia đơn giản như sau:</description>
    </item>
    <item>
      <title></title>
      <link>https://codedua.github.io/posts/opengles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://codedua.github.io/posts/opengles/</guid>
      <description>OpenGL ES hoàn toàn dựa trên shader, nghĩa là để vẽ vất kì hình nào bằng OpenGL ES thì đều phải load shader và bind chương trình đến shader. (Trong khi các phiên bản OpenGL cũ hơn 3.0 thì ta có thể vẽ các hình mà không cần shader bằng cách sử dụng các fixed-function như glBegin, glVertex, glColor, glEnd. Tuy nhiên từ openGL 3.0 thì đã loại bỏ fixed-function và yêu cầu phải sử dụng shader).</description>
    </item>
    <item>
      <title>Portfolio</title>
      <link>https://codedua.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://codedua.github.io/about/</guid>
      <description>Hi, I’m Van Toan (vtoan)!&#xA;I’m working as a software engineer, here are some projects I&amp;rsquo;ve contributed to:&#xA;Develop Human-Machine-Interface (HMI) for Cluster using Kanzi with Thundersoft, 2023 - present Work on Kanzi to build graphical user interfaces (GUIs) for Cluster screens. Manipulate 2D/3D assets to create graphic effects and animations; and handle user interactions with C++. Draw graphic elements using OpenGL Shading Language (GLSL). Core skills:&#xA;Understanding of computer graphic processing/ graphic pipeline.</description>
    </item>
  </channel>
</rss>
